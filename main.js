(()=>{"use strict";function e(e){let t;const a=new Date,n=new Date(e);let r=a.getTime(),o=n.getTime();return t=void 0===e||""===e?"green":o-r<=864e5?"red":"rgb(233, 162, 10)",t}function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return t(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function n(e){t(1,arguments);var a=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===a?new Date(e.getTime()):"number"==typeof e||"[object Number]"===a?new Date(e):("string"!=typeof e&&"[object String]"!==a||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(e){if(t(1,arguments),!a(e)&&"number"!=typeof e)return!1;var r=n(e);return!isNaN(Number(r))}var o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=t.width?String(t.width):e.defaultWidth,n=e.formats[a]||e.formats[e.defaultWidth];return n}}var d,i={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},l={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function c(e){return function(t,a){var n,r=a||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,s=r.width?String(r.width):o;n=e.formattingValues[s]||e.formattingValues[o]}else{var d=e.defaultWidth,i=r.width?String(r.width):e.defaultWidth;n=e.values[i]||e.values[d]}return n[e.argumentCallback?e.argumentCallback(t):t]}}function u(e){return function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=a.width,r=n&&e.matchPatterns[n]||e.matchPatterns[e.defaultMatchWidth],o=t.match(r);if(!o)return null;var s,d=o[0],i=n&&e.parsePatterns[n]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(i)?g(i,(function(e){return e.test(d)})):m(i,(function(e){return e.test(d)}));s=e.valueCallback?e.valueCallback(l):l,s=a.valueCallback?a.valueCallback(s):s;var c=t.slice(d.length);return{value:s,rest:c}}}function m(e,t){for(var a in e)if(e.hasOwnProperty(a)&&t(e[a]))return a}function g(e,t){for(var a=0;a<e.length;a++)if(t(e[a]))return a}const y={code:"en-US",formatDistance:function(e,t,a){var n,r=o[e];return n="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=a&&a.addSuffix?a.comparison&&a.comparison>0?"in "+n:n+" ago":n},formatLong:i,formatRelative:function(e,t,a,n){return l[e]},localize:{ordinalNumber:function(e,t){var a=Number(e),n=a%100;if(n>20||n<10)switch(n%10){case 1:return a+"st";case 2:return a+"nd";case 3:return a+"rd"}return a+"th"},era:c({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:c({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:c({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:c({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:c({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=e.match(d.matchPattern);if(!a)return null;var n=a[0],r=e.match(d.parsePattern);if(!r)return null;var o=d.valueCallback?d.valueCallback(r[0]):r[0];o=t.valueCallback?t.valueCallback(o):o;var s=e.slice(n.length);return{value:o,rest:s}}),era:u({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:u({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:u({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:u({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:u({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function h(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function p(e,a){t(2,arguments);var r=n(e).getTime(),o=h(a);return new Date(r+o)}function f(e,a){t(2,arguments);var n=h(a);return p(e,-n)}var v=864e5;function k(e){t(1,arguments);var a=1,r=n(e),o=r.getUTCDay(),s=(o<a?7:0)+o-a;return r.setUTCDate(r.getUTCDate()-s),r.setUTCHours(0,0,0,0),r}function b(e){t(1,arguments);var a=n(e),r=a.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(r+1,0,4),o.setUTCHours(0,0,0,0);var s=k(o),d=new Date(0);d.setUTCFullYear(r,0,4),d.setUTCHours(0,0,0,0);var i=k(d);return a.getTime()>=s.getTime()?r+1:a.getTime()>=i.getTime()?r:r-1}function w(e){t(1,arguments);var a=b(e),n=new Date(0);n.setUTCFullYear(a,0,4),n.setUTCHours(0,0,0,0);var r=k(n);return r}var E=6048e5;function C(e,a){t(1,arguments);var r=a||{},o=r.locale,s=o&&o.options&&o.options.weekStartsOn,d=null==s?0:h(s),i=null==r.weekStartsOn?d:h(r.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=n(e),c=l.getUTCDay(),u=(c<i?7:0)+c-i;return l.setUTCDate(l.getUTCDate()-u),l.setUTCHours(0,0,0,0),l}function S(e,a){t(1,arguments);var r=n(e),o=r.getUTCFullYear(),s=a||{},d=s.locale,i=d&&d.options&&d.options.firstWeekContainsDate,l=null==i?1:h(i),c=null==s.firstWeekContainsDate?l:h(s.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(o+1,0,c),u.setUTCHours(0,0,0,0);var m=C(u,a),g=new Date(0);g.setUTCFullYear(o,0,c),g.setUTCHours(0,0,0,0);var y=C(g,a);return r.getTime()>=m.getTime()?o+1:r.getTime()>=y.getTime()?o:o-1}function M(e,a){t(1,arguments);var n=a||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,s=null==o?1:h(o),d=null==n.firstWeekContainsDate?s:h(n.firstWeekContainsDate),i=S(e,a),l=new Date(0);l.setUTCFullYear(i,0,d),l.setUTCHours(0,0,0,0);var c=C(l,a);return c}var I=6048e5;function N(e,t){for(var a=e<0?"-":"",n=Math.abs(e).toString();n.length<t;)n="0"+n;return a+n}const D=function(e,t){var a=e.getUTCFullYear(),n=a>0?a:1-a;return N("yy"===t?n%100:n,t.length)},x=function(e,t){var a=e.getUTCMonth();return"M"===t?String(a+1):N(a+1,2)},T=function(e,t){return N(e.getUTCDate(),t.length)},B=function(e,t){return N(e.getUTCHours()%12||12,t.length)},j=function(e,t){return N(e.getUTCHours(),t.length)},q=function(e,t){return N(e.getUTCMinutes(),t.length)},O=function(e,t){return N(e.getUTCSeconds(),t.length)},L=function(e,t){var a=t.length,n=e.getUTCMilliseconds();return N(Math.floor(n*Math.pow(10,a-3)),t.length)};function U(e,t){var a=e>0?"-":"+",n=Math.abs(e),r=Math.floor(n/60),o=n%60;if(0===o)return a+String(r);var s=t||"";return a+String(r)+s+N(o,2)}function P(e,t){return e%60==0?(e>0?"-":"+")+N(Math.abs(e)/60,2):W(e,t)}function W(e,t){var a=t||"",n=e>0?"-":"+",r=Math.abs(e);return n+N(Math.floor(r/60),2)+a+N(r%60,2)}const Y={G:function(e,t,a){var n=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return a.era(n,{width:"abbreviated"});case"GGGGG":return a.era(n,{width:"narrow"});default:return a.era(n,{width:"wide"})}},y:function(e,t,a){if("yo"===t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return a.ordinalNumber(r,{unit:"year"})}return D(e,t)},Y:function(e,t,a,n){var r=S(e,n),o=r>0?r:1-r;return"YY"===t?N(o%100,2):"Yo"===t?a.ordinalNumber(o,{unit:"year"}):N(o,t.length)},R:function(e,t){return N(b(e),t.length)},u:function(e,t){return N(e.getUTCFullYear(),t.length)},Q:function(e,t,a){var n=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(n);case"QQ":return N(n,2);case"Qo":return a.ordinalNumber(n,{unit:"quarter"});case"QQQ":return a.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return a.quarter(n,{width:"narrow",context:"formatting"});default:return a.quarter(n,{width:"wide",context:"formatting"})}},q:function(e,t,a){var n=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(n);case"qq":return N(n,2);case"qo":return a.ordinalNumber(n,{unit:"quarter"});case"qqq":return a.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return a.quarter(n,{width:"narrow",context:"standalone"});default:return a.quarter(n,{width:"wide",context:"standalone"})}},M:function(e,t,a){var n=e.getUTCMonth();switch(t){case"M":case"MM":return x(e,t);case"Mo":return a.ordinalNumber(n+1,{unit:"month"});case"MMM":return a.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return a.month(n,{width:"narrow",context:"formatting"});default:return a.month(n,{width:"wide",context:"formatting"})}},L:function(e,t,a){var n=e.getUTCMonth();switch(t){case"L":return String(n+1);case"LL":return N(n+1,2);case"Lo":return a.ordinalNumber(n+1,{unit:"month"});case"LLL":return a.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return a.month(n,{width:"narrow",context:"standalone"});default:return a.month(n,{width:"wide",context:"standalone"})}},w:function(e,a,r,o){var s=function(e,a){t(1,arguments);var r=n(e),o=C(r,a).getTime()-M(r,a).getTime();return Math.round(o/I)+1}(e,o);return"wo"===a?r.ordinalNumber(s,{unit:"week"}):N(s,a.length)},I:function(e,a,r){var o=function(e){t(1,arguments);var a=n(e),r=k(a).getTime()-w(a).getTime();return Math.round(r/E)+1}(e);return"Io"===a?r.ordinalNumber(o,{unit:"week"}):N(o,a.length)},d:function(e,t,a){return"do"===t?a.ordinalNumber(e.getUTCDate(),{unit:"date"}):T(e,t)},D:function(e,a,r){var o=function(e){t(1,arguments);var a=n(e),r=a.getTime();a.setUTCMonth(0,1),a.setUTCHours(0,0,0,0);var o=a.getTime(),s=r-o;return Math.floor(s/v)+1}(e);return"Do"===a?r.ordinalNumber(o,{unit:"dayOfYear"}):N(o,a.length)},E:function(e,t,a){var n=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return a.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return a.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return a.day(n,{width:"short",context:"formatting"});default:return a.day(n,{width:"wide",context:"formatting"})}},e:function(e,t,a,n){var r=e.getUTCDay(),o=(r-n.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return N(o,2);case"eo":return a.ordinalNumber(o,{unit:"day"});case"eee":return a.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return a.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return a.day(r,{width:"short",context:"formatting"});default:return a.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,a,n){var r=e.getUTCDay(),o=(r-n.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return N(o,t.length);case"co":return a.ordinalNumber(o,{unit:"day"});case"ccc":return a.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return a.day(r,{width:"narrow",context:"standalone"});case"cccccc":return a.day(r,{width:"short",context:"standalone"});default:return a.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,a){var n=e.getUTCDay(),r=0===n?7:n;switch(t){case"i":return String(r);case"ii":return N(r,t.length);case"io":return a.ordinalNumber(r,{unit:"day"});case"iii":return a.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return a.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return a.day(n,{width:"short",context:"formatting"});default:return a.day(n,{width:"wide",context:"formatting"})}},a:function(e,t,a){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return a.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"aaa":return a.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return a.dayPeriod(n,{width:"narrow",context:"formatting"});default:return a.dayPeriod(n,{width:"wide",context:"formatting"})}},b:function(e,t,a){var n,r=e.getUTCHours();switch(n=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return a.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"bbb":return a.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return a.dayPeriod(n,{width:"narrow",context:"formatting"});default:return a.dayPeriod(n,{width:"wide",context:"formatting"})}},B:function(e,t,a){var n,r=e.getUTCHours();switch(n=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return a.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"BBBBB":return a.dayPeriod(n,{width:"narrow",context:"formatting"});default:return a.dayPeriod(n,{width:"wide",context:"formatting"})}},h:function(e,t,a){if("ho"===t){var n=e.getUTCHours()%12;return 0===n&&(n=12),a.ordinalNumber(n,{unit:"hour"})}return B(e,t)},H:function(e,t,a){return"Ho"===t?a.ordinalNumber(e.getUTCHours(),{unit:"hour"}):j(e,t)},K:function(e,t,a){var n=e.getUTCHours()%12;return"Ko"===t?a.ordinalNumber(n,{unit:"hour"}):N(n,t.length)},k:function(e,t,a){var n=e.getUTCHours();return 0===n&&(n=24),"ko"===t?a.ordinalNumber(n,{unit:"hour"}):N(n,t.length)},m:function(e,t,a){return"mo"===t?a.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):q(e,t)},s:function(e,t,a){return"so"===t?a.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):O(e,t)},S:function(e,t){return L(e,t)},X:function(e,t,a,n){var r=(n._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return P(r);case"XXXX":case"XX":return W(r);default:return W(r,":")}},x:function(e,t,a,n){var r=(n._originalDate||e).getTimezoneOffset();switch(t){case"x":return P(r);case"xxxx":case"xx":return W(r);default:return W(r,":")}},O:function(e,t,a,n){var r=(n._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+U(r,":");default:return"GMT"+W(r,":")}},z:function(e,t,a,n){var r=(n._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+U(r,":");default:return"GMT"+W(r,":")}},t:function(e,t,a,n){var r=n._originalDate||e;return N(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,a,n){return N((n._originalDate||e).getTime(),t.length)}};function J(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function Q(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var A={p:Q,P:function(e,t){var a,n=e.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return J(e,t);switch(r){case"P":a=t.dateTime({width:"short"});break;case"PP":a=t.dateTime({width:"medium"});break;case"PPP":a=t.dateTime({width:"long"});break;default:a=t.dateTime({width:"full"})}return a.replace("{{date}}",J(r,t)).replace("{{time}}",Q(o,t))}};const F=A;function H(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var z=["D","DD"],G=["YY","YYYY"];function X(e){return-1!==z.indexOf(e)}function R(e){return-1!==G.indexOf(e)}function _(e,t,a){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(a,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(a,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(a,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(a,"`; see: https://git.io/fxCyr"))}var V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,Z=/''/g,ee=/[a-zA-Z]/;function te(e,a,o){t(2,arguments);var s=String(a),d=o||{},i=d.locale||y,l=i.options&&i.options.firstWeekContainsDate,c=null==l?1:h(l),u=null==d.firstWeekContainsDate?c:h(d.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=i.options&&i.options.weekStartsOn,g=null==m?0:h(m),p=null==d.weekStartsOn?g:h(d.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var v=n(e);if(!r(v))throw new RangeError("Invalid time value");var k=H(v),b=f(v,k),w={firstWeekContainsDate:u,weekStartsOn:p,locale:i,_originalDate:v},E=s.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,F[t])(e,i.formatLong,w):e})).join("").match(V).map((function(t){if("''"===t)return"'";var n=t[0];if("'"===n)return ae(t);var r=Y[n];if(r)return!d.useAdditionalWeekYearTokens&&R(t)&&_(t,a,e),!d.useAdditionalDayOfYearTokens&&X(t)&&_(t,a,e),r(b,t,i.localize,w);if(n.match(ee))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return t})).join("");return E}function ae(e){return e.match($)[1].replace(Z,"'")}function ne(e,t,a,n){this.title=e,this.done=t,this.description=a,this.deadline=n}function re(e,t){this.name=e,this.tasks=t}const oe=(()=>{const e=e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)me[t].done=!1,localStorage.setItem("taskarray",JSON.stringify(me)),oe.closeModule(),ye.display();else{let a=e.target.dataset.projectno;ge[a].tasks[t].done=!1,localStorage.setItem("sidequesttaskarray",JSON.stringify(ge)),sideQuestModule.display(e),oe.closeModule()}};return{showModule:t=>{document.getElementById("myModal").style.display="block",document.querySelector(".btns").style.display="block",document.querySelector(".hiddenbtns").style.display="none",document.getElementById("taskName").textContent=t.target.dataset.taskName,document.getElementById("taskDescription").textContent=t.target.dataset.description;let a=document.getElementById("taskDeadline");void 0===t.target.dataset.deadline||""===t.target.dataset.deadline?a.textContent="":a.textContent=te(new Date(t.target.dataset.deadline),"dd-MM-yyyy");let n=document.getElementById("editbtn");n.dataset.taskName=t.target.dataset.taskName,n.dataset.description=t.target.dataset.description,n.dataset.deadline=t.target.dataset.deadline,n.dataset.array=t.target.dataset.array,n.dataset.taskno=t.target.dataset.taskno,n.dataset.projectno=t.target.dataset.projectno,n.addEventListener("click",oe.editModule);let r=document.getElementById("dltbtn");r.dataset.taskName=t.target.dataset.taskName,r.dataset.array=t.target.dataset.array,r.dataset.taskno=t.target.dataset.taskno,r.dataset.projectno=t.target.dataset.projectno,r.dataset.projectnumber=t.target.dataset.projectno,r.addEventListener("click",oe.rmvtask);let o=document.getElementById("undobtn");o.dataset.taskName=t.target.dataset.taskName,o.dataset.array=t.target.dataset.array,o.dataset.taskno=t.target.dataset.taskno,o.dataset.projectno=t.target.dataset.projectno,o.dataset.projectnumber=t.target.dataset.projectno,"true"===t.target.dataset.doneatt?o.style.display="inline":o.style.display="none",o.addEventListener("click",e)},closeModule:()=>{document.getElementById("myModal").style.display="none"},editModule:e=>{let t=document.createElement("input");document.getElementById("taskName").textContent="",t.placeholder=e.target.dataset.taskName,t.setAttribute("id","changeName"),document.getElementById("taskName").appendChild(t);let a=document.createElement("textarea");document.getElementById("taskDescription").textContent="",a.placeholder=e.target.dataset.description,a.setAttribute("id","changeDescription"),document.getElementById("taskDescription").appendChild(a);let n=document.createElement("input");document.getElementById("taskDeadline").textContent="",n.placeholder=e.target.dataset.deadline,n.type="date",n.setAttribute("id","changeDeadline"),document.getElementById("taskDeadline").appendChild(n),document.querySelector(".btns").style.display="none",document.querySelector(".hiddenbtns").style.display="block";let r=document.getElementById("savebtn");r.dataset.taskno=e.target.dataset.taskno,r.dataset.projectno=e.target.dataset.projectno,r.dataset.projectnumber=e.target.dataset.projectno,r.dataset.deadline=e.target.dataset.deadline,r.dataset.array=e.target.dataset.array;let o=document.getElementById("cancelbtn");r.addEventListener("click",oe.saveEdit),o.addEventListener("click",oe.closeModule)},saveEdit:e=>{if(console.log(e.target.dataset.array),console.log(e.target.dataset.deadline),"1"===e.target.dataset.array){let t=e.target.dataset.taskno,a=document.getElementById("changeName");""===a.value&&(a.value=me[t].title),me[t].title=a.value;let n=document.getElementById("changeDescription");""===n.value&&(n.value=me[t].description),me[t].description=n.value;let r=document.getElementById("changeDeadline");""===r.value&&(r.value=me[t].deadline),me[t].deadline=r.value,localStorage.setItem("taskarray",JSON.stringify(me)),oe.closeModule(),ye.display()}else{let t=e.target.dataset.taskno,a=e.target.dataset.projectno,n=document.getElementById("changeName");""===n.value&&(n.value=ge[a].tasks[t].title),ge[a].tasks[t].title=n.value;let r=document.getElementById("changeDescription");""===r.value&&(r.value=ge[a].tasks[t].description),ge[a].tasks[t].description=r.value;let o=document.getElementById("changeDeadline");""===o.value&&(o.value=ge[a].tasks[t].deadline),ge[a].tasks[t].deadline=o.value,localStorage.setItem("sidequesttaskarray",JSON.stringify(ge)),sideQuestModule.display(e),oe.closeModule()}},rmvtask:e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)me.splice(t,1),localStorage.setItem("taskarray",JSON.stringify(me)),oe.closeModule(),ye.display();else{let a=e.target.dataset.projectno;ge[a].tasks.splice(t,1),localStorage.setItem("sidequesttaskarray",JSON.stringify(ge)),sideQuestModule.display(e),oe.closeModule()}},undo:e}})(),se=document.querySelector(".activeQuestContent"),de=document.querySelector(".completeQuestContent");let ie=document.getElementById("add"),le=document.getElementById("clearb"),ce=document.getElementById("clearcomp"),ue=document.getElementById("removeSQ"),me=JSON.parse(localStorage.getItem("taskarray")||"[]"),ge=JSON.parse(localStorage.getItem("sidequesttaskarray")||"[]");const ye={display:()=>{ie.addEventListener("click",ye.addQuests),le.addEventListener("click",ye.cleararray),ce.addEventListener("click",ye.clearcompl),document.querySelector("#header").textContent="Main Quest",ue.style.display="none",se.textContent="",de.textContent="";for(let t=0;t<me.length;t++){let a=document.createElement("div"),n=document.createElement("label");n.textContent=me[t].title,n.setAttribute("id","label"+t),n.dataset.taskName=me[t].title,n.dataset.description=me[t].description,n.dataset.doneatt=me[t].done,n.dataset.deadline=me[t].deadline,n.dataset.array=1,n.dataset.taskno=t;let r=e(me[t].deadline);if(n.style.color=r,n.addEventListener("mouseover",(()=>{n.style="color:"+r+";border-bottom:2px solid black;cursor:pointer"})),n.addEventListener("mouseleave",(()=>{n.style="color:"+r+";border-bottom:none"})),n.addEventListener("click",oe.showModule),a.appendChild(n),!1===me[t].done){let e=document.createElement("div"),n=document.createElement("span");n.addEventListener("mouseover",(()=>{n.style="color:green;cursor:pointer;"})),n.addEventListener("mouseleave",(()=>{n.style="color:black;"})),n.addEventListener("click",ye.check),n.textContent="Done",n.value=t,e.appendChild(n),a.appendChild(e),se.appendChild(a)}else!0===me[t].done&&de.appendChild(a)}},check:e=>{let t=e.target.value;me[t].done=!0,localStorage.setItem("taskarray",JSON.stringify(me)),e.target.style.backgroundColor="green",ye.display()},addQuests:()=>{let e=new ne(prompt("Enter your quest young knight!"),!1,"","");me.push(e),localStorage.setItem("taskarray",JSON.stringify(me)),ye.display()},cleararray:function(){se.textContent="",de.textContent="",me=[],localStorage.setItem("taskarray",JSON.stringify(me))},clearcompl:function(){let e=[];for(let t=0;t<me.length;t++)!0===me[t].done&&e.push(t);console.log(e);for(let t=e.length-1;t>=0;t--)me.splice(e[t],1);localStorage.setItem("taskarray",JSON.stringify(me)),ye.display()}},he=(()=>{const e=e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)quests[t].done=!1,localStorage.setItem("taskarray",JSON.stringify(quests)),he.closeModule(),ye.display();else{let a=e.target.dataset.projectno;Ce[a].tasks[t].done=!1,localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.display(e),he.closeModule()}};return{showModule:t=>{document.getElementById("myModal").style.display="block",document.querySelector(".btns").style.display="block",document.querySelector(".hiddenbtns").style.display="none",document.getElementById("taskName").textContent=t.target.dataset.taskName,document.getElementById("taskDescription").textContent=t.target.dataset.description;let a=document.getElementById("taskDeadline");console.log(t.target.dataset.deadline),"undefined"===t.target.dataset.deadline||void 0===t.target.dataset.deadline||""===t.target.dataset.deadline?a.textContent="":a.textContent=te(new Date(t.target.dataset.deadline),"dd-MM-yyyy");let n=document.getElementById("editbtn");n.dataset.taskName=t.target.dataset.taskName,n.dataset.description=t.target.dataset.description,n.dataset.deadline=t.target.dataset.deadline,n.dataset.array=t.target.dataset.array,n.dataset.taskno=t.target.dataset.taskno,n.dataset.projectno=t.target.dataset.projectno,n.addEventListener("click",he.editModule);let r=document.getElementById("dltbtn");r.dataset.taskName=t.target.dataset.taskName,r.dataset.array=t.target.dataset.array,r.dataset.taskno=t.target.dataset.taskno,r.dataset.projectno=t.target.dataset.projectno,r.dataset.projectnumber=t.target.dataset.projectno,r.addEventListener("click",he.rmvtask);let o=document.getElementById("undobtn");o.dataset.taskName=t.target.dataset.taskName,o.dataset.array=t.target.dataset.array,o.dataset.taskno=t.target.dataset.taskno,o.dataset.projectno=t.target.dataset.projectno,o.dataset.projectnumber=t.target.dataset.projectno,"true"===t.target.dataset.doneatt?o.style.display="inline":o.style.display="none",o.addEventListener("click",e)},closeModule:()=>{document.getElementById("myModal").style.display="none"},editModule:e=>{let t=document.createElement("input");document.getElementById("taskName").textContent="",t.placeholder=e.target.dataset.taskName,t.setAttribute("id","changeName"),document.getElementById("taskName").appendChild(t);let a=document.createElement("textarea");document.getElementById("taskDescription").textContent="",a.placeholder=e.target.dataset.description,a.setAttribute("id","changeDescription"),document.getElementById("taskDescription").appendChild(a);let n=document.createElement("input");document.getElementById("taskDeadline").textContent="",n.placeholder=e.target.dataset.deadline,n.type="date",n.setAttribute("id","changeDeadline"),document.getElementById("taskDeadline").appendChild(n),document.querySelector(".btns").style.display="none",document.querySelector(".hiddenbtns").style.display="block";let r=document.getElementById("savebtn");r.dataset.taskno=e.target.dataset.taskno,r.dataset.projectno=e.target.dataset.projectno,r.dataset.projectnumber=e.target.dataset.projectno,r.dataset.deadline=e.target.dataset.deadline,r.dataset.array=e.target.dataset.array;let o=document.getElementById("cancelbtn");r.addEventListener("click",he.saveEdit),o.addEventListener("click",he.closeModule)},saveEdit:e=>{if(console.log(e.target.dataset.array),console.log(e.target.dataset.deadline),"1"===e.target.dataset.array){let t=e.target.dataset.taskno,a=document.getElementById("changeName");""===a.value&&(a.value=quests[t].title),quests[t].title=a.value;let n=document.getElementById("changeDescription");""===n.value&&(n.value=quests[t].description),quests[t].description=n.value;let r=document.getElementById("changeDeadline");""===r.value&&(r.value=quests[t].deadline),quests[t].deadline=r.value,localStorage.setItem("taskarray",JSON.stringify(quests)),he.closeModule(),ye.display()}else{let t=e.target.dataset.taskno,a=e.target.dataset.projectno,n=document.getElementById("changeName");""===n.value&&(n.value=Ce[a].tasks[t].title),Ce[a].tasks[t].title=n.value;let r=document.getElementById("changeDescription");""===r.value&&(r.value=Ce[a].tasks[t].description),Ce[a].tasks[t].description=r.value;let o=document.getElementById("changeDeadline");""===o.value&&(o.value=Ce[a].tasks[t].deadline),Ce[a].tasks[t].deadline=o.value,localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.display(e),he.closeModule()}},rmvtask:e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)quests.splice(t,1),localStorage.setItem("taskarray",JSON.stringify(quests)),he.closeModule(),ye.display();else{let a=e.target.dataset.projectno;Ce[a].tasks.splice(t,1),localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.display(e),he.closeModule()}},undo:e}})(),pe=document.querySelector(".activeQuestContent"),fe=document.querySelector(".completeQuestContent"),ve=document.querySelector("#dropcont");let ke=document.getElementById("add"),be=document.getElementById("clearb"),we=document.getElementById("clearcomp"),Ee=document.getElementById("removeSQ"),Ce=JSON.parse(localStorage.getItem("sidequesttaskarray")||"[]");const Se={dropdownside:()=>{for(let e=0;e<Ce.length;e++){let t=document.createElement("a");t.textContent=Ce[e].name,t.dataset.projectnumber=e,t.addEventListener("click",Se.display),ve.appendChild(t)}let e=document.createElement("a");e.textContent="Add Side Quest",e.style="background-color:yellow",e.addEventListener("mouseover",(()=>{e.style="background-color:green;cursor:pointer;"})),e.addEventListener("mouseleave",(()=>{e.style.backgroundColor="yellow"})),e.addEventListener("click",Se.addproject),ve.appendChild(e)},display:t=>{let a=t.target.dataset.projectnumber;Ee.style.display="inline",Ee.dataset.projectnumber=a,Ee.addEventListener("click",Se.deleteSQ),ke.dataset.projectnumber=a,ke.removeEventListener("click",ye.addQuests),ke.addEventListener("click",Se.addQuests),be.dataset.projectnumber=a,be.removeEventListener("click",ye.cleararray),be.addEventListener("click",Se.cleararray),we.dataset.projectnumber=a,we.removeEventListener("click",ye.clearcompl),we.addEventListener("click",Se.clearcompl),document.querySelector("#header").textContent=Ce[a].name,pe.textContent="",fe.textContent="";for(let t=0;t<Ce[a].tasks.length;t++){let n=document.createElement("div"),r=document.createElement("label");r.textContent=Ce[a].tasks[t].title,r.setAttribute("id","label"+t),r.dataset.taskName=Ce[a].tasks[t].title,r.dataset.description=Ce[a].tasks[t].description,r.dataset.projectno=a,r.dataset.deadline=Ce[a].tasks[t].deadline,r.dataset.taskno=t,r.dataset.doneatt=Ce[a].tasks[t].done;let o=e(Ce[a].tasks[t].deadline);if(r.style.color=o,r.addEventListener("mouseover",(()=>{r.style="color:"+o+";border-bottom:2px solid black;cursor:pointer"})),r.addEventListener("mouseleave",(()=>{r.style="color:"+o+";border-bottom:none"})),r.addEventListener("click",he.showModule),n.appendChild(r),!1===Ce[a].tasks[t].done){let e=document.createElement("div"),r=document.createElement("span");r.textContent="Done",r.value=t,r.dataset.projectnumber=a,r.addEventListener("mouseover",(()=>{r.style="color:green;cursor:pointer;"})),r.addEventListener("mouseleave",(()=>{r.style="color:black;"})),r.addEventListener("click",Se.check),e.appendChild(r),n.appendChild(e),pe.appendChild(n)}else!0===Ce[a].tasks[t].done&&fe.appendChild(n)}},check:e=>{let t=e.target.dataset.projectnumber;console.log(t);let a=e.target.value;console.log(a),Ce[t].tasks[a].done=!0,localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),e.target.style.backgroundColor="green",Se.display(e)},addQuests:e=>{let t=prompt("Enter your quest young knight!"),a=e.target.dataset.projectnumber;console.log(a);let n=new ne(t,!1,"","");Ce[a].tasks.push(n),localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.display(e)},cleararray:function(e){let t=e.target.dataset.projectnumber;pe.textContent="",fe.textContent="",Ce[t].tasks=[],localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce))},addproject:()=>{let e=new re(prompt("Enter the name of your side quest"),[]);Ce.push(e);for(let e=0;e<Ce.length;e++)ve.removeChild(ve.firstElementChild);localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.dropdownside()},deleteSQ:e=>{let t=e.target.dataset.projectnumber;Ce.splice(t,1),localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),ye.display(),ve.textContent="",Se.dropdownside()},clearcompl:function(e){let t=e.target.dataset.projectnumber,a=[];for(let e=0;e<Ce[t].tasks.length;e++)!0===Ce[t].tasks[e].done&&a.push(e);console.log(a);for(let e=a.length-1;e>=0;e--)Ce[t].tasks.splice(a[e],1);localStorage.setItem("sidequesttaskarray",JSON.stringify(Ce)),Se.display(e)}};let Me=JSON.parse(localStorage.getItem("taskarray")||"[]"),Ie=JSON.parse(localStorage.getItem("sidequesttaskarray")||"[]");const Ne=(()=>{const e=e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)Me[t].done=!1,localStorage.setItem("taskarray",JSON.stringify(Me)),Ne.closeModule(),ye.display();else{let a=e.target.dataset.projectno;Ie[a].tasks[t].done=!1,localStorage.setItem("sidequesttaskarray",JSON.stringify(Ie)),Se.display(e),Ne.closeModule()}};return{showModule:t=>{document.getElementById("myModal").style.display="block",document.querySelector(".btns").style.display="block",document.querySelector(".hiddenbtns").style.display="none",document.getElementById("taskName").textContent=t.target.dataset.taskName,document.getElementById("taskDescription").textContent=t.target.dataset.description,document.getElementById("taskDeadline").textContent=t.target.dataset.deadline;let a=document.getElementById("editbtn");a.dataset.taskName=t.target.dataset.taskName,a.dataset.description=t.target.dataset.description,a.dataset.deadline=t.target.dataset.deadline,a.dataset.array=t.target.dataset.array,a.dataset.taskno=t.target.dataset.taskno,a.dataset.projectno=t.target.dataset.projectno,a.addEventListener("click",Ne.editModule);let n=document.getElementById("dltbtn");n.dataset.taskName=t.target.dataset.taskName,n.dataset.array=t.target.dataset.array,n.dataset.taskno=t.target.dataset.taskno,n.dataset.projectno=t.target.dataset.projectno,n.dataset.projectnumber=t.target.dataset.projectno,n.addEventListener("click",Ne.rmvtask);let r=document.getElementById("undobtn");r.dataset.taskName=t.target.dataset.taskName,r.dataset.array=t.target.dataset.array,r.dataset.taskno=t.target.dataset.taskno,r.dataset.projectno=t.target.dataset.projectno,r.dataset.projectnumber=t.target.dataset.projectno,"true"===t.target.dataset.doneatt?r.style.display="inline":r.style.display="none",r.addEventListener("click",e)},closeModule:()=>{document.getElementById("myModal").style.display="none"},editModule:e=>{let t=document.createElement("input");document.getElementById("taskName").textContent="",t.placeholder=e.target.dataset.taskName,t.setAttribute("id","changeName"),document.getElementById("taskName").appendChild(t);let a=document.createElement("textarea");document.getElementById("taskDescription").textContent="",a.placeholder=e.target.dataset.description,a.setAttribute("id","changeDescription"),document.getElementById("taskDescription").appendChild(a);let n=document.createElement("input");document.getElementById("taskDeadline").textContent="",n.placeholder=e.target.dataset.deadline,n.type="date",n.setAttribute("id","changeDeadline"),document.getElementById("taskDeadline").appendChild(n),document.querySelector(".btns").style.display="none",document.querySelector(".hiddenbtns").style.display="block";let r=document.getElementById("savebtn");r.dataset.taskno=e.target.dataset.taskno,r.dataset.projectno=e.target.dataset.projectno,r.dataset.projectnumber=e.target.dataset.projectno,r.dataset.deadline=e.target.dataset.deadline,r.dataset.array=e.target.dataset.array;let o=document.getElementById("cancelbtn");r.addEventListener("click",Ne.saveEdit),o.addEventListener("click",Ne.closeModule)},saveEdit:e=>{if(console.log(e.target.dataset.array),console.log(e.target.dataset.deadline),"1"===e.target.dataset.array){let t=e.target.dataset.taskno,a=document.getElementById("changeName");""===a.value&&(a.value=Me[t].title),Me[t].title=a.value;let n=document.getElementById("changeDescription");""===n.value&&(n.value=Me[t].description),Me[t].description=n.value;let r=document.getElementById("changeDeadline");""===r.value&&(r.value=Me[t].deadline),Me[t].deadline=r.value,localStorage.setItem("taskarray",JSON.stringify(Me)),Ne.closeModule(),ye.display()}else{let t=e.target.dataset.taskno,a=e.target.dataset.projectno,n=document.getElementById("changeName");""===n.value&&(n.value=Ie[a].tasks[t].title),Ie[a].tasks[t].title=n.value;let r=document.getElementById("changeDescription");""===r.value&&(r.value=Ie[a].tasks[t].description),Ie[a].tasks[t].description=r.value;let o=document.getElementById("changeDeadline");""===o.value&&(o.value=Ie[a].tasks[t].deadline),Ie[a].tasks[t].deadline=o.value,localStorage.setItem("sidequesttaskarray",JSON.stringify(Ie)),Se.display(e),Ne.closeModule()}},rmvtask:e=>{let t=e.target.dataset.taskno;if("1"===e.target.dataset.array)Me.splice(t,1),localStorage.setItem("taskarray",JSON.stringify(Me)),Ne.closeModule(),ye.display();else{let a=e.target.dataset.projectno;Ie[a].tasks.splice(t,1),localStorage.setItem("sidequesttaskarray",JSON.stringify(Ie)),Se.display(e),Ne.closeModule()}},undo:e}})();document.querySelector(".close").addEventListener("click",Ne.closeModule);let De=document.getElementById("add"),xe=document.getElementById("clearb"),Te=document.getElementById("clearcomp");ye.display(),Se.dropdownside(),document.getElementById("mainb").addEventListener("click",(()=>{De.removeEventListener("click",Se.addQuests),Te.removeEventListener("click",Se.clearcompl),xe.removeEventListener("click",Se.cleararray),ye.display()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,